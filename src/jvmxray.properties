
# ***********************************************************************************
# JVMXRay Configuration
#
#
# jvmxray configuration is specified by properties. The filter settings specified
# by this file are initialized once at startup.  Filters are specified as
# jvmxray.filterN.*.  Where N uniquely identifies all properties for the filter
# represents an Integer 1 to 500.
#
# Filters only specify which events will be captured and processed.  Event
# handling like logging or sending to SIEM tools is handled by Adaptors.
# 
#
# jvmxray.filterN.class, required, specifies the filter class to load by
#     reflection.  Filters must provide a 3 argument constructor that conforms to
#     the following specification,
#
#     Filter(EnumSet<Events> events, FilterActions defaultfilter, Properties p)

#     The arguments to Filter are as follows.
#     events          is the list of events types that should be sent
#                     to this filter.
#     defaultfilter   exact implementation of the filters behavior is determined
#                     by the designer but it's generally the action to apply
#                     when a match occurs.  A match always occurs for events
#                     where additional criteria is unsupported or unspecified.
#     p               a subset of properties from this file that are applicable
#                     to the property.  Specifically, all properties prefixed
#                     by jvmxray.filterN.* where N is the filter number. 
#
# jvmxray.filterN.events, required, comma separated list of 1 or more supported 
#     event types handled by this filter.
#
# jvmxray.filterN.default, required, the default FilterActions to apply on a
#      positive match.  You can use this to process or delete events.
#  
# jvmxray.filterN.*, other filters may be specified by filter designers as required.
#
#
# Filter Tips/Notes:
#  - Use NullFilter to enable event types where no further filtering is desired.
#  - Use StringFilter to filter on specified string matching criteria like, 
#        startswith, endswith, matches.  Use Java RegX expressions for matches
#        criteria.  Filtering criteria incurse overhead depending upon the 
#        specified criteria.  Likewise, sending too many events to SEIMS or
#        central log servers incurs network overhead.  It's left to implementors
#        to determine the best settings that balance security concerns and 
#        performance.
#
# ***********************************************************************************
#
#

# 
# Stacktrace options.  Provides call stack information for specified events.
# Carries a heavy performance penalty if used indescriminetnly; however, it's
# useful for locating offending code or providing diagnostics information to
# developers for follow-up.  The following options are supported as defined
# in NullSecurityManager.Callstack.
#   NONE,      No stacktrace data will be retained.
#   LIMITED,   Limited stacktrace data will be included.  Each event will include
#              an ordered list of classes in the trace.  No method arguments or
#              line numbers are included.
#   FULL,      Full stacktrace is included with method and line numbers.
jvmxray.event.stacktrace=NONE

#
# Capture file CUD operations for all files
jvmxray.filter1.events=FILE_WRITE, FILE_DELETE
jvmxray.filter1.class=org.owasp.jvmxray.filters.NullFilter
jvmxray.filter1.default=ALLOW
# You can also DENY to quickly deny a class of messages.  DENY
# is the default if unspecified but this allows operators to 
# work on configuration and enable(ALLOW) it when ready.
#jvmxray.filter1.default=DENY

#
# Capture socket access.  
jvmxray.filter2.events=SOCKET_ACCEPT, SOCKET_CONNECT, SOCKET_LISTEN
jvmxray.filter2.class=org.owasp.jvmxray.filters.NullFilter
jvmxray.filter2.default=ALLOW

#
# Capture any process executed
# A point to keep in mind is that this is called on both success and failure
# of the execute operation.
jvmxray.filter3.events=FILE_EXECUTE 
jvmxray.filter3.class=org.owasp.jvmxray.filters.NullFilter
jvmxray.filter3.default=ALLOW

#
# Capture all package access except JVM packages
# 3 matching criteria supported for the StringFilter: startswith, endswith, and matches.
# matches takes a regular expression, see Java String docs for details.
jvmxray.filter4.events=PACKAGE_ACCESS, PACKAGE_DEFINE
jvmxray.filter4.class=org.owasp.jvmxray.filters.StringFilter
# This is the default for matched criteria.
jvmxray.filter4.default=ALLOW
#jvmxray.filter4.startswith1=java.
jvmxray.filter4.startswith2=javax.
jvmxray.filter4.startswith3=org.ietf.jgss
jvmxray.filter4.startswith4=org.omg
jvmxray.filter4.startswith5=org.wc3.dom
jvmxray.filter4.startswith6=org.xml.sax

#
# Capture file R operations to any certs files and suppress all others
# More info on patterns, https://bit.ly/2Soqfm7
jvmxray.filter5.events=FILE_READ
jvmxray.filter5.class=org.owasp.jvmxray.filters.StringFilter
jvmxray.filter5.default=ALLOW
jvmxray.filter5.matches1=.*certs$

#
# Capture permission checks
jvmxray.filter6.events=PERMISSION
jvmxray.filter6.class=org.owasp.jvmxray.filters.NullFilter
jvmxray.filter6.default=ALLOW